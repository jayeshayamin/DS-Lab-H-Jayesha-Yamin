#include<iostream>
using namespace std;

/*
Task #9:
Implement a program to represent a sparse matrix using a dynamic 2D array.
=> Input matrix elements.
=> Display the matrix in normal form.
=> Display the matrix in compressed form (row, column, value).
*/

int main()
{
    int r,c;
    cout<<"Enter rows: ";
    cin>>r;
    cout<<"Enter columns: ";
    cin>>c;
    
    int** matrixA=new int*[r];
    for(int i=0;i<r;i++)
    {
        matrixA[i]=new int[c];
    }
    cout<<"\nEnter elements...\n";
    for(int i=0;i<r;i++)
    {
        for(int j=0;j<c;j++)
        {
            cin>>matrixA[i][j];
        }
    }
    for(int i=0;i<r;i++)
    {
        for(int j=0;j<c;j++)
        {
            cout<<matrixA[i][j]<<" ";
        }
        cout<<"\n";
    }
    
        cout<<"\n";
    int count=0;
    for(int i=0;i<r;i++)
    {
        for(int j=0;j<c;j++)
        {
            if(matrixA[i][j]!=0)
            {
                count++;
            }
        }
    }
    int** compressedmatrix=new int*[count];
    for(int i=0;i<count;i++)
    {
        compressedmatrix[i]=new int[3];
    }
    int index=0;
    for(int i=0;i<r;i++)
    {
        for(int j=0;j<c;j++)
        {
            if(matrixA[i][j]!=0)
            {
                compressedmatrix[index][0]=i;
                compressedmatrix[index][1]=j;
                compressedmatrix[index][2]=matrixA[i][j];
                index++;
            }
        }
    }
     for(int i=0;i<count;i++)
    {
        for(int j=0;j<3;j++)
        {
            cout<<compressedmatrix[i][j]<<" ";
        }
        cout<<"\n";
    }
    int k=0;
    for(int i=0;i<r;i++)
    {
        delete[] matrixA[i];
        delete[] compressedmatrix[k++];
    }
    delete[] matrixA;
    delete[] compressedmatrix;
    return 0;
}
